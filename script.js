const passageDisplay=document.getElementById('passage-display');const typingInput=document.getElementById('typing-input');const passageSelect=document.getElementById('passage-select');const restartBtn=document.getElementById('restart-btn');const newPassageBtn=document.getElementById('new-passage-btn');const virtualKeyboard=document.getElementById('virtual-keyboard');const completionModal=document.getElementById('completion-modal');const modalWPM=document.getElementById('modal-wpm');const modalAccuracy=document.getElementById('modal-accuracy');const modalTime=document.getElementById('modal-time');const modalCorrectChars=document.getElementById('modal-correct-chars');const modalIncorrectChars=document.getElementById('modal-incorrect-chars');const modalTotalTyped=document.getElementById('modal-total-typed');const modalContinueSameBtn=document.getElementById('modal-continue-same-btn');const modalStartNextBtn=document.getElementById('modal-start-next-btn');const wpmDisplay=document.getElementById('wpm-display');const accuracyDisplay=document.getElementById('accuracy-display');const timeDisplay=document.getElementById('time-display');const keyboardMap={'Backquote':'`','Digit1':'1','Digit2':'2','Digit3':'3','Digit4':'4','Digit5':'5','Digit6':'6','Digit7':'7','Digit8':'8','Digit9':'9','Digit0':'0','Minus':'-','Equal':'=','Backspace':'Backspace','Tab':'Tab','KeyQ':'Q','KeyW':'W','KeyE':'E','KeyR':'R','KeyT':'T','KeyY':'Y','KeyU':'U','KeyI':'I','KeyO':'O','KeyP':'P','BracketLeft':'[','BracketRight':']','Backslash':'\\','CapsLock':'CapsLock','KeyA':'A','KeyS':'S','KeyD':'D','KeyF':'F','KeyG':'G','KeyH':'H','KeyJ':'J','KeyK':'K','KeyL':'L','Semicolon':';','Quote':'\'','Enter':'Enter','ShiftLeft':'ShiftLeft','KeyZ':'Z','KeyX':'X','KeyC':'C','KeyV':'V','KeyB':'B','KeyN':'N','KeyM':'M','Comma':',','Period':'.','Slash':'/','ShiftRight':'ShiftRight','Space':'Space'};const virtualKeys={};for(const code in keyboardMap){const keyElement=virtualKeyboard.querySelector(`[data-key="${code}"]`);if(keyElement){virtualKeys[code]=keyElement;}}const passages=["The quick brown fox jumps over the lazy dog.","Sphinx of black quartz, judge my vow.","How vexingly quick daft zebras jump!","The five boxing wizards jump quickly.","Bright vixens jump; dozy fowl quack.","He promptly judged the two fake ivory statues.","A wizard's job is to vex chumps quickly in fog.","Few black taxis drive up major roads on quiet hazy nights.","The job of waxing linoleum frequently peeves chintzy kids.","All questions asked by five watched experts amaze the judge."];let currentPassage='';let characterIndex=0;let correctCharacters=0;let incorrectCharacters=0;let totalCharactersTyped=0;let startTime;let endTime;let timerInterval;function loadPassage(passage){currentPassage=passage;passageDisplay.innerHTML='';passage.split('').forEach(char=>{const span=document.createElement('span');span.textContent=char;passageDisplay.appendChild(span);console.log('Character:',char,'Span:',span);});characterIndex=0;correctCharacters=0;incorrectCharacters=0;totalCharactersTyped=0;updateCurrentCharacterHighlight();typingInput.value='';typingInput.disabled=false;typingInput.focus();startTime=null;endTime=null;clearInterval(timerInterval);updateMetricsDisplay(0,0,0);completionModal.classList.add('hidden');}passageDisplay.addEventListener('click',()=>{typingInput.focus();console.log('Passage display clicked, typing input focused.');});function updateCurrentCharacterHighlight(){const characters=passageDisplay.querySelectorAll('span');console.log('Updating current character highlight for index:',characterIndex,'Characters NodeList:',characters);characters.forEach((charSpan)=>{charSpan.classList.remove('current');});if(characterIndex<characters.length){characters[characterIndex].classList.add('current');}}function calculateWPM(timeInSeconds){if(timeInSeconds===0)return 0;const charactersForWPM=totalCharactersTyped;const wordsTyped=charactersForWPM/5;return Math.round((wordsTyped/timeInSeconds)*60);}function calculateNetWPM(timeInSeconds){if(timeInSeconds===0)return 0;const grossWPM=calculateWPM(timeInSeconds);const errorsPerMinute=(incorrectCharacters/(timeInSeconds/60));return Math.round(grossWPM-errorsPerMinute);}function calculateAccuracy(){const totalTyped=correctCharacters+incorrectCharacters;if(totalTyped===0)return 0;return Math.round((correctCharacters/totalTyped)*100);}function formatTime(timeInSeconds){const minutes=Math.floor(timeInSeconds/60);const seconds=Math.floor(timeInSeconds%60);return `${minutes.toString().padStart(2,'0')}:${seconds.toString().padStart(2,'0')}`;}function updateMetricsDisplay(wpm,accuracy,time){console.log('Updating metrics: WPM=',wpm,'Accuracy=',accuracy,'Time=',time);wpmDisplay.textContent=wpm;accuracyDisplay.textContent=`${accuracy}%`;timeDisplay.textContent=formatTime(time);modalWPM.textContent=wpm;modalAccuracy.textContent=`${accuracy}%`;modalTime.textContent=formatTime(time);modalCorrectChars.textContent=correctCharacters;modalIncorrectChars.textContent=incorrectCharacters;modalTotalTyped.textContent=totalCharactersTyped;}passages.forEach((passage,index)=>{const option=document.createElement('option');option.value=index;option.textContent=passage.substring(0,30)+(passage.length>30?'...':'');passageSelect.appendChild(option);});passageSelect.addEventListener('change',e=>{loadPassage(passages[e.target.value]);});restartBtn.addEventListener('click',()=>{loadPassage(currentPassage);});newPassageBtn.addEventListener('click',()=>{const randomIndex=Math.floor(Math.random()*passages.length);loadPassage(passages[randomIndex]);passageSelect.value=randomIndex;});loadPassage(passages[0]);typingInput.addEventListener('input',e=>{console.log('Input event fired. Current value:',e.target.value);if(!startTime){startTime=new Date().getTime();timerInterval=setInterval(()=>{const currentTime=new Date().getTime();let timeElapsed=(currentTime-startTime)/1000;updateMetricsDisplay(calculateWPM(timeElapsed),calculateAccuracy(),timeElapsed);},1000);}const typedText=typingInput.value;const characters=passageDisplay.querySelectorAll('span');console.log('Typed Text:',typedText);console.log('Character Index:',characterIndex);console.log('Correct Characters:',correctCharacters);console.log('Incorrect Characters:',incorrectCharacters);characters.forEach(charSpan=>{charSpan.classList.remove('correct','incorrect');});for(let i=0;i<typedText.length;i++){const expectedChar=currentPassage[i];const typedChar=typedText[i];if(typedChar===expectedChar){characters[i].classList.add('correct');}else{characters[i].classList.add('incorrect');}}characterIndex=typedText.length;correctCharacters=0;incorrectCharacters=0;totalCharactersTyped=typedText.length;for(let i=0;i<typedText.length;i++){if(typedText[i]===currentPassage[i]){correctCharacters++;}else{incorrectCharacters++;}}updateCurrentCharacterHighlight();if(characterIndex>=currentPassage.length){endTime=new Date().getTime();const timeElapsed=(endTime-startTime)/1000;const finalWPM=calculateWPM(timeElapsed);const finalNetWPM=calculateNetWPM(timeElapsed);const finalAccuracy=calculateAccuracy();updateMetricsDisplay(finalNetWPM,finalAccuracy,timeElapsed);typingInput.disabled=true;clearInterval(timerInterval);completionModal.classList.remove('hidden');}});modalContinueSameBtn.addEventListener('click',()=>{completionModal.classList.add('hidden');loadPassage(currentPassage);});modalStartNextBtn.addEventListener('click',()=>{completionModal.classList.add('hidden');newPassageBtn.click();});typingInput.addEventListener('keydown',e=>{console.log('Keydown event fired. Key:',e.key,'Code:',e.code);const virtualKey=virtualKeys[e.code];if(virtualKey){virtualKey.classList.add('active');}});typingInput.addEventListener('keyup',e=>{console.log('Keyup event fired. Key:',e.key,'Code:',e.code);const virtualKey=virtualKeys[e.code];if(virtualKey){virtualKey.classList.remove('active');}});